# REF:
#   - https://gemfury.com/help/gpg-signing/
#   - https://gemfury.com/guide/alpine/configure-apk/
#   - https://gemfury.com/help/yum-repository
#   - https://gemfury.com/help/apt-repository/#apt-setup
# Nushell nfpm configuration file.
# Make sure to check the documentation at https://nfpm.goreleaser.com
#
# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://nfpm.goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

# Name. (required)
name: nushell

# Architecture. (required)
# This will expand any env var you set in the field, e.g. arch: ${GOARCH}
# The architecture is specified using Go nomenclature (GOARCH) and translated
# to the platform specific equivalent. In order to manually set the architecture
# to a platform specific value, set `{format}.arch`.
# Examples: `all`, `amd64`, `386`, `arm5`, `arm6`, `arm7`, `arm64`, `mips`,
# `mipsle`, `mips64le`, `ppc64le`, `s390`
# Currently supported: amd64 & arm64
arch: ${NU_PKG_ARCH}

# Platform.
# This will expand any env var you set in the field, e.g. platform: ${GOOS}
# This is only used by the rpm and deb packagers.
# Examples: `linux` (default), `darwin`
platform: linux

# Version. (required)
# This will expand any env var you set in the field, e.g. version: ${SEMVER}
# Some package managers, like deb, require the version to start with a digit.
# Hence, you should not prefix the version with 'v'.
version: ${NU_VERSION}

# Version Epoch.
# A package with a higher version epoch will always be considered newer.
# See: https://www.debian.org/doc/debian-policy/ch-controlfields.html#epochs-should-be-used-sparingly
# epoch: 1

# Version Release, aka revision.
# This will expand any env var you set in the field, e.g. release: ${VERSION_RELEASE}
# This is appended to the `version` after `prerelease`. This should be
# incremented if you release an updated package of the same upstream version,
# and it should reset to 1 when bumping the version.
release: ${NU_VERSION_REVISION}

# Section.
# This is only used by the deb packager.
# See: https://www.debian.org/doc/debian-policy/ch-archive.html#sections
section: shells

# Priority.
# Defaults to `optional` on deb
# Defaults to empty on rpm and apk
# See: https://www.debian.org/doc/debian-policy/ch-archive.html#priorities
priority: optional

# Maintainer. (required)
# This will expand any env var you set in the field, e.g. maintainer: ${GIT_COMMITTER_NAME} <${GIT_COMMITTER_EMAIL}>
# Defaults to empty on rpm and apk
# Leaving the 'maintainer' field unset will not be allowed in a future version
maintainer: The Nushell Project Developers

# Description.
# This will expand any env var you set in the field, e.g. description: ${DESCRIPTION}
# Defaults to `no description given`.
# Most packagers call for a one-line synopsis of the package. Some (like deb)
# also call for a multi-line description starting on the second line.
description: |
  A new type of shell

# Vendor.
# This will expand any env var you set in the field, e.g. vendor: ${VENDOR}
# This is only used by the rpm packager.
vendor: The Nushell Project Developers

# Package's homepage.
# This will expand any env var you set in the field, e.g. homepage: ${CI_PROJECT_URL}
homepage: https://www.nushell.sh

# License.
license: MIT

# Changelog YAML file, see: https://github.com/goreleaser/chglog
# changelog: "changelog.yaml"

# Contents to add to the package
# This can be binaries or any other files.
contents:
  # Basic file that applies to all packagers
  - src: ./release/nu
    dst: /usr/bin/nu
  - src: ./release/nu_plugin_inc
    dst: /usr/libexec/nushell/nu_plugin_inc
  - src: ./release/nu_plugin_query
    dst: /usr/libexec/nushell/nu_plugin_query
  - src: ./release/nu_plugin_gstat
    dst: /usr/libexec/nushell/nu_plugin_gstat
  - src: ./release/nu_plugin_polars
    dst: /usr/libexec/nushell/nu_plugin_polars
  - src: ./release/nu_plugin_formats
    dst: /usr/libexec/nushell/nu_plugin_formats
  - src: ./scripts/post-install.nu
    dst: /usr/libexec/nushell/post-install.nu
  - src: ./scripts/pre-remove.nu
    dst: /usr/libexec/nushell/pre-remove.nu
  - src: ./release/LICENSE
    dst: /usr/share/licenses/nushell/LICENSE

# Scripts to run at specific stages. (overridable)
scripts:
  preremove: ./scripts/pre-remove.sh
  postinstall: ./scripts/post-install.sh

# Custom configuration applied only to the Deb packager.
deb:
  # The package is signed if a key_file is set
  signature:
    # Signature method, either "dpkg-sig" or "debsign".
    # Defaults to "debsign"
    # "dpkg-sig" is not supported in newer Debian versions.
    method: debsign

    # PGP secret key (can also be ASCII-armored). The passphrase is taken
    # from the environment variable $NFPM_DEB_PASSPHRASE with a fallback
    # to $NFPM_PASSPHRASE.
    # This will expand any env var you set in the field, e.g. key_file: ${SIGNING_KEY_FILE}
    key_file: key.gpg

    # The type describes the signers role, possible values are "origin",
    # "maint" and "archive". If unset, the type defaults to "origin".
    type: origin

    # PGP secret key id in hex format, if it is not set it will select the first subkey
    # that has the signing flag set. You may need to set this if you want to use the primary key as the signing key
    # This will expand any env var you set in the field, e.g. key_id: ${DEB_SIGNING_KEY_ID}
    key_id: ${SIGNING_KEY_ID}

# Custom configuration applied only to the RPM packager.
rpm:
  # The package is signed if a key_file is set
  # signature:
    # PGP secret key (can also be ASCII-armored), the passphrase is taken
    # from the environment variable $NFPM_RPM_PASSPHRASE with a fallback
    # to $NFPM_PASSPHRASE.
    # This will expand any env var you set in the field, e.g. key_file: ${SIGNING_KEY_FILE}
    # key_file: key.gpg

    # PGP secret key id in hex format, if it is not set it will select the first subkey
    # that has the signing flag set. You may need to set this if you want to use the primary key as the signing key
    # or to support older versions of RPM < 4.13.0 which cannot validate a signed RPM that used a subkey to sign
    # This will expand any env var you set in the field, e.g. key_id: ${RPM_SIGNING_KEY_ID}
    # key_id: ${SIGNING_KEY_ID}

